{"id":"node_modules/@tensorflow/tfjs-backend-webgl/dist/top_k_gpu.js","dependencies":[{"name":"/mnt/package.json","includedInParent":true,"mtime":1677116220762},{"name":"/mnt/.babelrc","includedInParent":true,"mtime":1677077576810},{"name":"/mnt/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":1677116170324}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SwapProgram = exports.MergeProgram = void 0;\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nclass SwapProgram {\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape) {\n    this.variableNames = ['x', 'indices']; // |n| Size of the original input of TopK.\n    // |firstPass|indicates if this is the first time swap is being used which\n    // means no indices input containing the top K is present yet.\n    // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n\n    this.customUniforms = [{\n      name: 'n',\n      type: 'int'\n    }, {\n      name: 'firstPass',\n      type: 'int'\n    }, {\n      name: 'negativeInf',\n      type: 'float'\n    }, {\n      name: 'dir',\n      type: 'int'\n    }, {\n      name: 'inc',\n      type: 'int'\n    }];\n    this.outputShape = shape;\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n\n}\n\nexports.SwapProgram = SwapProgram;\n\nclass MergeProgram {\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape) {\n    this.variableNames = ['x', 'indices']; // |n| Size of the original input of TopK\n    // |firstPass| indicates if this is the first time swap is being used which\n    // means no indices input containing the top K is present yet.\n    // |k| Top k elements desired\n\n    this.customUniforms = [{\n      name: 'n',\n      type: 'int'\n    }, {\n      name: 'firstPass',\n      type: 'int'\n    }, {\n      name: 'k',\n      type: 'int'\n    }];\n    this.outputShape = shape;\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n\n}\n\nexports.MergeProgram = MergeProgram;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":17,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":29,"column":13},"generated":{"line":17,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":17,"column":17}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":17,"column":18}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":45,"column":2},"generated":{"line":18,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":49,"column":2},"generated":{"line":22,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":49,"column":2},"generated":{"line":22,"column":2}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":49,"column":2},"generated":{"line":22,"column":13}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":49,"column":14},"generated":{"line":22,"column":14}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":49,"column":2},"generated":{"line":22,"column":19}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":49,"column":29},"generated":{"line":22,"column":21}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":23,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":23,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":23,"column":22}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":30,"column":18},"generated":{"line":23,"column":25}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":30,"column":19},"generated":{"line":23,"column":26}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":30,"column":18},"generated":{"line":23,"column":29}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":30,"column":24},"generated":{"line":23,"column":31}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":30,"column":18},"generated":{"line":23,"column":40}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":23,"column":41}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":49,"column":29},"generated":{"line":23,"column":42}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":33,"column":2},"generated":{"line":23,"column":43}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":24,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":35,"column":2},"generated":{"line":25,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":36,"column":2},"generated":{"line":26,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":37,"column":2},"generated":{"line":28,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":37,"column":2},"generated":{"line":28,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":37,"column":2},"generated":{"line":28,"column":23}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":28,"column":26}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":4},"generated":{"line":28,"column":27}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":5},"generated":{"line":29,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":5},"generated":{"line":29,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":9},"generated":{"line":29,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":11},"generated":{"line":29,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":4},"generated":{"line":29,"column":15}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":16},"generated":{"line":30,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":16},"generated":{"line":30,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":20},"generated":{"line":30,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":22},"generated":{"line":30,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":38,"column":4},"generated":{"line":31,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":31,"column":5}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":4},"generated":{"line":31,"column":7}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":5},"generated":{"line":32,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":5},"generated":{"line":32,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":9},"generated":{"line":32,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":11},"generated":{"line":32,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":4},"generated":{"line":32,"column":23}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":24},"generated":{"line":33,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":24},"generated":{"line":33,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":28},"generated":{"line":33,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":30},"generated":{"line":33,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":39,"column":4},"generated":{"line":34,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":34,"column":5}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":4},"generated":{"line":34,"column":7}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":5},"generated":{"line":35,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":5},"generated":{"line":35,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":9},"generated":{"line":35,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":11},"generated":{"line":35,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":4},"generated":{"line":35,"column":25}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":26},"generated":{"line":36,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":26},"generated":{"line":36,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":30},"generated":{"line":36,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":32},"generated":{"line":36,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":40,"column":4},"generated":{"line":37,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":37,"column":5}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":4},"generated":{"line":37,"column":7}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":5},"generated":{"line":38,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":5},"generated":{"line":38,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":9},"generated":{"line":38,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":11},"generated":{"line":38,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":4},"generated":{"line":38,"column":17}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":18},"generated":{"line":39,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":18},"generated":{"line":39,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":22},"generated":{"line":39,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":24},"generated":{"line":39,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":41,"column":4},"generated":{"line":40,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":40,"column":5}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":4},"generated":{"line":40,"column":7}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":5},"generated":{"line":41,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":5},"generated":{"line":41,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":9},"generated":{"line":41,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":11},"generated":{"line":41,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":4},"generated":{"line":41,"column":17}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":18},"generated":{"line":42,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":18},"generated":{"line":42,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":22},"generated":{"line":42,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":24},"generated":{"line":42,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":42,"column":4},"generated":{"line":43,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":43,"column":5}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":37,"column":2},"generated":{"line":43,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":44,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":44,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":44,"column":20}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":50,"column":23},"generated":{"line":44,"column":23}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":44,"column":28}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":52,"column":4},"generated":{"line":45,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":52,"column":9},"generated":{"line":45,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":52,"column":4},"generated":{"line":45,"column":17}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":52,"column":20},"generated":{"line":45,"column":20}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":52,"column":4},"generated":{"line":85,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":93,"column":3},"generated":{"line":86,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":88,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":96,"column":6},"generated":{"line":92,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":96,"column":13},"generated":{"line":92,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":96,"column":6},"generated":{"line":92,"column":18}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":96,"column":25},"generated":{"line":92,"column":19}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":110,"column":2},"generated":{"line":93,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":113,"column":2},"generated":{"line":96,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":113,"column":2},"generated":{"line":96,"column":2}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":113,"column":2},"generated":{"line":96,"column":13}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":113,"column":14},"generated":{"line":96,"column":14}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":113,"column":2},"generated":{"line":96,"column":19}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":113,"column":29},"generated":{"line":96,"column":21}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":97,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":97,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":97,"column":22}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":97,"column":18},"generated":{"line":97,"column":25}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":97,"column":19},"generated":{"line":97,"column":26}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":97,"column":18},"generated":{"line":97,"column":29}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":97,"column":24},"generated":{"line":97,"column":31}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":97,"column":18},"generated":{"line":97,"column":40}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":97,"column":41}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":113,"column":29},"generated":{"line":97,"column":42}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":100,"column":2},"generated":{"line":97,"column":43}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":101,"column":2},"generated":{"line":98,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":102,"column":2},"generated":{"line":99,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":100,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":104,"column":2},"generated":{"line":102,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":104,"column":2},"generated":{"line":102,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":104,"column":2},"generated":{"line":102,"column":23}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":104,"column":19},"generated":{"line":102,"column":26}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":4},"generated":{"line":102,"column":27}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":5},"generated":{"line":103,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":5},"generated":{"line":103,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":9},"generated":{"line":103,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":11},"generated":{"line":103,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":4},"generated":{"line":103,"column":15}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":16},"generated":{"line":104,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":16},"generated":{"line":104,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":20},"generated":{"line":104,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":22},"generated":{"line":104,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":105,"column":4},"generated":{"line":105,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":104,"column":19},"generated":{"line":105,"column":5}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":4},"generated":{"line":105,"column":7}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":5},"generated":{"line":106,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":5},"generated":{"line":106,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":9},"generated":{"line":106,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":11},"generated":{"line":106,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":4},"generated":{"line":106,"column":23}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":24},"generated":{"line":107,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":24},"generated":{"line":107,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":28},"generated":{"line":107,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":30},"generated":{"line":107,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":106,"column":4},"generated":{"line":108,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":104,"column":19},"generated":{"line":108,"column":5}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":4},"generated":{"line":108,"column":7}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":5},"generated":{"line":109,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":5},"generated":{"line":109,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":9},"generated":{"line":109,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":11},"generated":{"line":109,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":4},"generated":{"line":109,"column":15}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":16},"generated":{"line":110,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":16},"generated":{"line":110,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":20},"generated":{"line":110,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":22},"generated":{"line":110,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":107,"column":4},"generated":{"line":111,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":104,"column":19},"generated":{"line":111,"column":5}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":104,"column":2},"generated":{"line":111,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":114,"column":4},"generated":{"line":112,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":114,"column":9},"generated":{"line":112,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":114,"column":4},"generated":{"line":112,"column":20}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":114,"column":23},"generated":{"line":112,"column":23}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":114,"column":4},"generated":{"line":112,"column":28}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":116,"column":4},"generated":{"line":113,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":116,"column":9},"generated":{"line":113,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":116,"column":4},"generated":{"line":113,"column":17}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":116,"column":20},"generated":{"line":113,"column":20}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":116,"column":4},"generated":{"line":147,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":151,"column":3},"generated":{"line":148,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts","name":null,"original":{"line":96,"column":25},"generated":{"line":150,"column":0}}],"sources":{"../../../../../tfjs-backend-webgl/src/top_k_gpu.ts":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"0f84eafd75d8806ca4a27124573d6553","cacheData":{"env":{}}}