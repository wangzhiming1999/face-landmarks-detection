{"id":"node_modules/@tensorflow/tfjs-backend-webgl/dist/transform_gpu.js","dependencies":[{"name":"/mnt/package.json","includedInParent":true,"mtime":1677116220762},{"name":"/mnt/.babelrc","includedInParent":true,"mtime":1677077576810},{"name":"/mnt/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":1677116170324}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransformProgram = void 0;\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass TransformProgram {\n  constructor(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape) {\n    this.variableNames = ['Image', 'Transforms'];\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n\n      case 'reflect':\n        fillModeId = 2;\n        break;\n\n      case 'wrap':\n        fillModeId = 3;\n        break;\n\n      case 'nearest':\n        fillModeId = 4;\n        break;\n\n      default:\n        fillModeId = 1;\n        break;\n    }\n\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n\n}\n\nexports.TransformProgram = TransformProgram;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":24,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":24,"column":6}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":24,"column":22}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":24,"column":23}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":25,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":25,"column":2}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":25,"column":13}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":26,"column":6},"generated":{"line":25,"column":14}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":25,"column":25}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":26,"column":27},"generated":{"line":25,"column":27}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":25,"column":37}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":25,"column":39}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":25,"column":52}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":25,"column":54}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":25,"column":62}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":28,"column":55},"generated":{"line":25,"column":64}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":25,"column":73}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":25,"column":75}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":25,"column":83}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":29,"column":48},"generated":{"line":25,"column":85}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":26,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":26,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":26,"column":22}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":26,"column":25}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":26,"column":26}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":26,"column":33}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":28},"generated":{"line":26,"column":35}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":26,"column":47}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":26,"column":48}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":27,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":27,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":27,"column":20}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":30,"column":23},"generated":{"line":27,"column":23}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":27,"column":31}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":4},"generated":{"line":28,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":28,"column":10}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":29},"generated":{"line":28,"column":29}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":32},"generated":{"line":28,"column":32}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":45},"generated":{"line":28,"column":45}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":50},"generated":{"line":28,"column":50}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":32},"generated":{"line":28,"column":59}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":62},"generated":{"line":28,"column":62}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":32},"generated":{"line":28,"column":63}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":66},"generated":{"line":28,"column":66}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":4},"generated":{"line":28,"column":67}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":29,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":32,"column":8},"generated":{"line":29,"column":8}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":29,"column":18}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":31,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":33,"column":12},"generated":{"line":31,"column":12}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":31,"column":20}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":34,"column":6},"generated":{"line":32,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":34,"column":11},"generated":{"line":32,"column":11}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":34,"column":6},"generated":{"line":32,"column":21}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":35,"column":8},"generated":{"line":33,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":35,"column":8},"generated":{"line":33,"column":8}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":35,"column":18},"generated":{"line":33,"column":18}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":35,"column":21},"generated":{"line":33,"column":21}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":35,"column":8},"generated":{"line":33,"column":22}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":34,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":37,"column":6},"generated":{"line":36,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":37,"column":11},"generated":{"line":36,"column":11}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":37,"column":6},"generated":{"line":36,"column":20}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":38,"column":8},"generated":{"line":37,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":38,"column":8},"generated":{"line":37,"column":8}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":38,"column":18},"generated":{"line":37,"column":18}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":38,"column":21},"generated":{"line":37,"column":21}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":38,"column":8},"generated":{"line":37,"column":22}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":39,"column":8},"generated":{"line":38,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":40,"column":6},"generated":{"line":40,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":40,"column":11},"generated":{"line":40,"column":11}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":40,"column":6},"generated":{"line":40,"column":17}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":41,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":41,"column":8}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":41,"column":18},"generated":{"line":41,"column":18}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":41,"column":21},"generated":{"line":41,"column":21}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":41,"column":22}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":42,"column":8},"generated":{"line":42,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":43,"column":6},"generated":{"line":44,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":43,"column":11},"generated":{"line":44,"column":11}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":43,"column":6},"generated":{"line":44,"column":20}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":44,"column":8},"generated":{"line":45,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":44,"column":8},"generated":{"line":45,"column":8}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":44,"column":18},"generated":{"line":45,"column":18}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":45,"column":21}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":44,"column":8},"generated":{"line":45,"column":22}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":45,"column":8},"generated":{"line":46,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":46,"column":6},"generated":{"line":48,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":49,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":49,"column":8}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":47,"column":18},"generated":{"line":49,"column":18}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":47,"column":21},"generated":{"line":49,"column":21}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":49,"column":22}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":48,"column":8},"generated":{"line":50,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":51,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":53,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":53,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":53,"column":17}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":50,"column":20},"generated":{"line":53,"column":20}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":53,"column":19},"generated":{"line":56,"column":19}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":53,"column":29},"generated":{"line":56,"column":29}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":77,"column":27},"generated":{"line":80,"column":27}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":77,"column":37},"generated":{"line":80,"column":37}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":94,"column":27},"generated":{"line":97,"column":27}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":94,"column":37},"generated":{"line":97,"column":37}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":105,"column":8},"generated":{"line":107,"column":44}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":105,"column":19},"generated":{"line":107,"column":55}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":105,"column":50},"generated":{"line":107,"column":86}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":105,"column":60},"generated":{"line":107,"column":96}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":108,"column":38},"generated":{"line":110,"column":38}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":108,"column":47},"generated":{"line":110,"column":47}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":132,"column":38},"generated":{"line":134,"column":38}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":132,"column":47},"generated":{"line":134,"column":47}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":136,"column":51},"generated":{"line":138,"column":51}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":136,"column":61},"generated":{"line":138,"column":61}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":137,"column":51},"generated":{"line":139,"column":51}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":137,"column":62},"generated":{"line":139,"column":62}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":139,"column":22},"generated":{"line":141,"column":22}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":139,"column":41},"generated":{"line":141,"column":41}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":165,"column":9}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":164,"column":3},"generated":{"line":166,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":168,"column":0}}],"sources":{"../../../../../tfjs-backend-webgl/src/transform_gpu.ts":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"1299f903c094385bd81427d9c5c144c8","cacheData":{"env":{}}}